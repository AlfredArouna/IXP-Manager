<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PatchPanel extends \Entities\PatchPanel implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function setName($name)
    {
        $this->__load();
        return parent::setName($name);
    }

    public function getName()
    {
        $this->__load();
        return parent::getName();
    }

    public function setMedium($medium)
    {
        $this->__load();
        return parent::setMedium($medium);
    }

    public function getMedium()
    {
        $this->__load();
        return parent::getMedium();
    }

    public function setConnector($connector)
    {
        $this->__load();
        return parent::setConnector($connector);
    }

    public function getConnector()
    {
        $this->__load();
        return parent::getConnector();
    }

    public function setDuplexAllowed($duplexAllowed)
    {
        $this->__load();
        return parent::setDuplexAllowed($duplexAllowed);
    }

    public function getDuplexAllowed()
    {
        $this->__load();
        return parent::getDuplexAllowed();
    }

    public function setNotes($notes)
    {
        $this->__load();
        return parent::setNotes($notes);
    }

    public function getNotes()
    {
        $this->__load();
        return parent::getNotes();
    }

    public function setUPosition($uPosition)
    {
        $this->__load();
        return parent::setUPosition($uPosition);
    }

    public function getUPosition()
    {
        $this->__load();
        return parent::getUPosition();
    }

    public function setInstalled($installed)
    {
        $this->__load();
        return parent::setInstalled($installed);
    }

    public function getInstalled()
    {
        $this->__load();
        return parent::getInstalled();
    }

    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function addPatchPanelPort(\Entities\PatchPanelPort $patchPanelPorts)
    {
        $this->__load();
        return parent::addPatchPanelPort($patchPanelPorts);
    }

    public function removePatchPanelPort(\Entities\PatchPanelPort $patchPanelPorts)
    {
        $this->__load();
        return parent::removePatchPanelPort($patchPanelPorts);
    }

    public function getPatchPanelPorts()
    {
        $this->__load();
        return parent::getPatchPanelPorts();
    }

    public function setCabinet(\Entities\Cabinet $cabinet)
    {
        $this->__load();
        return parent::setCabinet($cabinet);
    }

    public function getCabinet()
    {
        $this->__load();
        return parent::getCabinet();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'name', 'medium', 'connector', 'duplex_allowed', 'notes', 'u_position', 'installed', 'id', 'PatchPanelPorts', 'Cabinet');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}