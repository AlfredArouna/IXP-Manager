<?php

namespace Proxies\__CG__\Entities;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class PatchPanelPortObject extends \Entities\PatchPanelPortObject implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    /** @private */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int) $this->_identifier["id"];
        }
        $this->__load();
        return parent::getId();
    }

    public function setConsoleServerConnection(\Entities\ConsoleServerConnection $consoleServerConnection)
    {
        $this->__load();
        return parent::setConsoleServerConnection($consoleServerConnection);
    }

    public function getConsoleServerConnection()
    {
        $this->__load();
        return parent::getConsoleServerConnection();
    }

    public function setCustomerEquipment(\Entities\CustomerEquipment $customerEquipment)
    {
        $this->__load();
        return parent::setCustomerEquipment($customerEquipment);
    }

    public function getCustomerEquipment()
    {
        $this->__load();
        return parent::getCustomerEquipment();
    }

    public function setPatchPanelPort(\Entities\PatchPanelPort $patchPanelPort)
    {
        $this->__load();
        return parent::setPatchPanelPort($patchPanelPort);
    }

    public function getPatchPanelPort()
    {
        $this->__load();
        return parent::getPatchPanelPort();
    }

    public function setSwitchPort(\Entities\SwitchPort $switchPort)
    {
        $this->__load();
        return parent::setSwitchPort($switchPort);
    }

    public function getSwitchPort()
    {
        $this->__load();
        return parent::getSwitchPort();
    }

    public function setPatchPort(\Entities\PatchPanelPort $patchPort = NULL)
    {
        $this->__load();
        return parent::setPatchPort($patchPort);
    }

    public function getPatchPort()
    {
        $this->__load();
        return parent::getPatchPort();
    }

    public function setPort(\Entities\PatchPanelPort $port)
    {
        $this->__load();
        return parent::setPort($port);
    }

    public function getPort()
    {
        $this->__load();
        return parent::getPort();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'Port', 'ConsoleServerConnection', 'CustomerEquipment', 'SwitchPort', 'PatchPanelPort');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields as $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}